// <auto-generated />
using System;
using KSimple.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KSimple.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("KSimple.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("KSimple.Models.Packet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("KSimple.Models.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserDefinedId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("KSimple.Models.StorageGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "StorageId");

                    b.HasIndex("StorageId");

                    b.ToTable("StorageGroups");
                });

            modelBuilder.Entity("KSimple.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelTree")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserDefinedId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("KSimple.Models.TemplateGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateGroups");
                });

            modelBuilder.Entity("KSimple.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KSimple.Models.UserGroupRight", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupRights");
                });

            modelBuilder.Entity("KSimple.Models.Packet", b =>
                {
                    b.HasOne("KSimple.Models.Storage", "Storage")
                        .WithMany("Packets")
                        .HasForeignKey("StorageId");
                });

            modelBuilder.Entity("KSimple.Models.Storage", b =>
                {
                    b.HasOne("KSimple.Models.Template", "Template")
                        .WithMany("Storages")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KSimple.Models.StorageGroup", b =>
                {
                    b.HasOne("KSimple.Models.Group", "Group")
                        .WithMany("StorageGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KSimple.Models.Storage", "Storage")
                        .WithMany("StorageGroups")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KSimple.Models.TemplateGroup", b =>
                {
                    b.HasOne("KSimple.Models.Group", "Group")
                        .WithMany("TemplateGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KSimple.Models.Template", "Template")
                        .WithMany("TemplateGroups")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KSimple.Models.UserGroupRight", b =>
                {
                    b.HasOne("KSimple.Models.Group", "Group")
                        .WithMany("UserGroupRights")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KSimple.Models.User", "User")
                        .WithMany("UserGroupRights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("KSimple.Models.Right", "Rights", b1 =>
                        {
                            b1.Property<Guid>("UserGroupRightGroupId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("UserGroupRightUserId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("CanModifyStorages")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("CanReadStorages")
                                .HasColumnType("INTEGER");

                            b1.HasKey("UserGroupRightGroupId", "UserGroupRightUserId");

                            b1.ToTable("UserGroupRights");

                            b1.WithOwner()
                                .HasForeignKey("UserGroupRightGroupId", "UserGroupRightUserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
